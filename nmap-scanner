#!/bin/python3

# dependency check for the modules
try: 
	import os
	import subprocess
	import sys
	import re
	from colorama import Fore, Back, Style
	import fileinput
	import requests
	from urllib.request import urlopen
	from urllib.error import *
	from ftplib import FTP
except ModuleNotFoundError:
	print('run the requirements.txt file to have all the requirements satisfied')



print(Fore.RED + '''

███╗░░██╗███╗░░░███╗░█████╗░██████╗░  ░░░░░░  ░█████╗░██╗░░░██╗████████╗░█████╗░
████╗░██║████╗░████║██╔══██╗██╔══██╗  ░░░░░░  ██╔══██╗██║░░░██║╚══██╔══╝██╔══██╗
██╔██╗██║██╔████╔██║███████║██████╔╝  █████╗  ███████║██║░░░██║░░░██║░░░██║░░██║
██║╚████║██║╚██╔╝██║██╔══██║██╔═══╝░  ╚════╝  ██╔══██║██║░░░██║░░░██║░░░██║░░██║
██║░╚███║██║░╚═╝░██║██║░░██║██║░░░░░  ░░░░░░  ██║░░██║╚██████╔╝░░░██║░░░╚█████╔╝
╚═╝░░╚══╝╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░░░░  ░░░░░░  ╚═╝░░╚═╝░╚═════╝░░░░╚═╝░░░░╚════╝░
	'''
	)

print(Fore.GREEN + '''
𝔸𝕦𝕥𝕙𝕠𝕣𝕤:
𝕔𝕪𝕡𝕙𝕖𝕣𝟚𝟛
𝟜ℤ𝟜ℝ𝟜𝟛𝕃
	''' + Style.RESET_ALL
	)
#print()




# check dependencies

# check for index input
try:
	var_1 = sys.argv[1]

except IndexError:
	print('Put a valid switch or use -h switch to see the list of options')


# check for the input
try:
	if (var_1 == '-h'):
		print('Help Menu:')
		print('Run the script as root')
		print('syntax: ./nmap-scanner <ip>')

		sys.exit() 

except:
	sys.exit()

f = open("Parsing_file.txt", "w+")

#check for a valid IP address
def ip_check(ip):
	""" checks input is a valid IP or not"""
	regex = "^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$"
	if (re.search(regex, var_1)) :
		return 1;
	else:
		return 0;

#Ping Check
def ping_check(ip):
	""" checks for ICMP ping"""
	check = os.system(f"ping -c 1  {ip} > /dev/null 2>&1")
	return check

def dependency_checks(tool):
	""" Checks the dependencies for the tools that are going to be"""
	try:
		cmd1 = subprocess.Popen(["tool"],
				stdout=subprocess.PIPE, 
				stderr=subprocess.PIPE)

	except FileNotFoundError:
		print('run the requirements.txt file to have all the requirements satisfied')

def web_scanner(ip):
	"""check for a webpage"""
	open_ports = []
	url1="http://{}:80".format(ip)
	#	url2="https://{}:80".format(ip)
	url2="http://{}:8080".format(ip)
	#	url4="https://{}:8080".format(ip)
	response = requests.get(url1)
	if response != 200:
		print(response)
		open_ports.append('80')
	
	response = requests.get(url2)
	if response != 200:
		print(response)
		open_ports.append('8080')

	try:
		requests.get(url1)
	except ConnectionError:
		print("looks like tere is no service running on this port")

	try:
		requests.get(url2)
	except ConnectionError:
		print("looks like tere is no service running on this port")


####### enter the Network-scanner ########
if (ip_check(var_1)):
	dependency_checks(nmap)
	try:
		#SCANNER
		if((ping_check(var_1)) != 0):
			#print("123")
			print("Seems like Host is not up yet or not responding to ICMP ping")
			Cont_Flag = str(input(Fore.GREEN +'If you wish to continue the scan with the -Pn switch press Y: '+ Style.RESET_ALL))
			if(Cont_Flag == 'y'):
				cmd = subprocess.run(["nmap", "-p-", "-Pn", "-T4", var_1], stdout=f)

			else:
				sys.exit()
		else:
			cmd = subprocess.run(["nmap", "-p-", "-T4", var_1], stdout=f)
		
		
			

	except KeyboardInterrupt:
		sys.exit()		

#else of the scanner if
else:
	print('''whoops!! The script recieved an invalid argument.
		Please check your ip address or use the -h switch to get a list of commands''')
	sys.exit()


f.close() # to support the overwriting functionality

##### OUTPUT THE RESULT IN A FILE TO BE PARSED #####
x = open("Parsing_file.txt")
Parse = x.read()

data = (re.findall(r'[0-9]+/', Parse))
data = [x[:-1] for x in data]

listToStr = ','.join([str(elem) for elem in data])

try:
	cmd = subprocess.run(["nmap", "-p",listToStr, "-A", "-T4", var_1])


except KeyboardInterrupt:
	sys.exit()


## Output the whole 
## Additional Menu
print("you wish to continue")
q = open("buffer.txt", "w+")
#web_scanner( var_1 )

######### Web Tools ##########
if 80 or 8080 in listToStr:
	dependency_checks(nikto)

	print("Entering a Nikto scan because we found either port 80 or 8080 in the nmap scan")
	try:
		cmd = subprocess.run(["nikto", "-h", var_1,":","80"])
		cmd = subprocess.run(["nikto", "-h", var_1,":","8080"])
	
	except KeyboardInterrupt:
		sys.exit()
#check for wordpress site for exploitation
#curl "http://{}:80".format(var_1)
#web_scanner(var_1)

###### webscanner ########
try:
    html = urlopen("http://{}:80".format(var_1))

except HTTPError as e:
    print("HTTP error", e)
     
except URLError as e:
    print("Opps ! Page not found!")
 
else:
	print("entering wp scan")


# If found FTP
####### FTP SECTION #######
if 21 in listToStr:
	try:
		ftp = FTP(var_1)   # connect to host, default port
		ftp.login()
		print("Login Successfull here is the file structure")
		files = ftp.dir()
		print(files)

	except ConnectionResetError:
		print('Cant connect!!')

## SMB File check
## any custom ports
## go buster
## A file will be created by the name of Report.txt that will have all the open services listed.!!


    

## Logic: if port in list then use the expoitation tools within the distro
 

